{"version":3,"sources":["components/card/card.jsx","components/cardList/cardList.jsx","components/searchBox/searchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","list","map","monster","key","SearchBox","handleSearch","placeholder","type","onChange","e","target","value","App","filterText","setState","state","monsters","fetch","then","response","json","users","this","filteredMonsters","filter","toLocaleLowerCase","includes","toLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAaeA,G,kBAVF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,0BAAsDK,IAAI,YAClE,4BAAKJ,GACL,2BAAIC,MCWDI,EAfE,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACf,OACI,yBAAKJ,UAAU,aACVI,EAAKC,KAAI,SAACC,GAAD,OACN,kBAAC,EAAD,CACIC,IAAKD,EAAQT,GACbA,GAAIS,EAAQT,GACZC,KAAMQ,EAAQR,KACdC,MAAOO,EAAQP,aCHpBS,G,MANG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,YAC9B,OACI,2BAAOC,KAAK,SAASX,UAAU,SAASU,YAAaA,EAAaE,SAAU,SAAAC,GAAC,OAAIJ,EAAaI,EAAEC,OAAOC,YCgChGC,E,kDA/Bb,aAAe,IAAD,8BACZ,gBAcDP,aAAe,SAACQ,GACf,EAAKC,SAAS,CAACD,gBAbf,EAAKE,MAAQ,CACXF,WAAY,GACZG,SAAU,IALA,E,gEASO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKP,SAAS,CAAEE,SAAUK,S,+BAOrC,IAAD,EACwBC,KAAKP,MAA7BC,EADA,EACAA,SAAUH,EADV,EACUA,WACXU,EAAmBP,EAASQ,QAAO,SAAAtB,GAAO,OAAIA,EAAQR,KAAK+B,oBAAoBC,SAASb,EAAWc,kBACzG,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,CAAWS,aAAciB,KAAKjB,aAAcC,YAAY,mBACxD,kBAAC,EAAD,CAAUN,KAAMuB,S,GA1BNK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.64319c87.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css'\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './cardList.css'\r\nimport Card from \"../card/card\";\r\n\r\nconst CardList = ({list}) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {list.map((monster) => (\r\n                <Card\r\n                    key={monster.id}\r\n                    id={monster.id}\r\n                    name={monster.name}\r\n                    email={monster.email}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport './searchBox.css';\r\n\r\nconst SearchBox = ({handleSearch, placeholder}) => {\r\n    return (\r\n        <input type=\"search\" className=\"search\" placeholder={placeholder} onChange={e => handleSearch(e.target.value)}/>\r\n    );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/cardList/cardList\";\nimport SearchBox from \"./components/searchBox/searchBox\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      filterText: \"\",\n      monsters: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n   handleSearch = (filterText) => {\n    this.setState({filterText})\n  }\n\n  render() {\n    const {monsters, filterText} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLocaleLowerCase().includes(filterText.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <SearchBox handleSearch={this.handleSearch} placeholder=\"Search monster\"/>\n        <CardList list={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}